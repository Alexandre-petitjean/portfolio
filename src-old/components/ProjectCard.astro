---
interface Props {
    title: string;
    description: string;
    iconPath: string;
    iconColor: 'red' | 'primary' | 'blue' | 'green' | 'purple' | 'orange';
    technologies: string[];
    isCompleted?: boolean;
    successMetric?: {
        text: string;
        icon: string;
        color: 'primary' | 'blue' | 'green';
    };
    link?: string;
}

const { 
    title, 
    description, 
    iconPath, 
    iconColor, 
    technologies, 
    isCompleted = false, 
    successMetric,
    link 
} = Astro.props;

// Mapping des couleurs pour les classes CSS
const colorMap = {
    red: {
        bg: 'from-red-500/20 to-red-600/20',
        hoverBg: 'group-hover:from-red-400/30 group-hover:to-red-500/30',
        text: 'text-red-600 dark:text-red-400 group-hover:text-red-700 dark:group-hover:text-red-300',
        badge: 'bg-red-500/20 text-red-700 dark:text-red-300 border-red-400/30'
    },
    primary: {
        bg: 'from-primary-500/20 to-primary-600/20',
        hoverBg: 'group-hover:from-primary-400/30 group-hover:to-primary-500/30',
        text: 'text-primary-600 dark:text-primary-400 group-hover:text-primary-700 dark:group-hover:text-primary-300',
        badge: 'bg-primary-500/20 text-primary-700 dark:text-primary-300 border-primary-400/30'
    },
    blue: {
        bg: 'from-blue-500/20 to-blue-600/20',
        hoverBg: 'group-hover:from-blue-400/30 group-hover:to-blue-500/30',
        text: 'text-blue-600 dark:text-blue-400 group-hover:text-blue-700 dark:group-hover:text-blue-300',
        badge: 'bg-blue-500/20 text-blue-700 dark:text-blue-300 border-blue-400/30'
    },
    green: {
        bg: 'from-green-500/20 to-green-600/20',
        hoverBg: 'group-hover:from-green-400/30 group-hover:to-green-500/30',
        text: 'text-green-600 dark:text-green-400 group-hover:text-green-700 dark:group-hover:text-green-300',
        badge: 'bg-green-500/20 text-green-700 dark:text-green-300 border-green-400/30'
    },
    purple: {
        bg: 'from-purple-500/20 to-purple-600/20',
        hoverBg: 'group-hover:from-purple-400/30 group-hover:to-purple-500/30',
        text: 'text-purple-600 dark:text-purple-400 group-hover:text-purple-700 dark:group-hover:text-purple-300',
        badge: 'bg-purple-500/20 text-purple-700 dark:text-purple-300 border-purple-400/30'
    },
    orange: {
        bg: 'from-orange-500/20 to-orange-600/20',
        hoverBg: 'group-hover:from-orange-400/30 group-hover:to-orange-500/30',
        text: 'text-orange-600 dark:text-orange-400 group-hover:text-orange-700 dark:group-hover:text-orange-300',
        badge: 'bg-orange-500/20 text-orange-700 dark:text-orange-300 border-orange-400/30'
    }
};

// Mapping des couleurs pour les technologies
const techColorMap = {
    'Django': 'bg-primary-500/20 text-primary-700 dark:text-primary-300 border-primary-400/30',
    'DRF': 'bg-blue-500/20 text-blue-700 dark:text-blue-300 border-blue-400/30',
    'Python': 'bg-primary-500/20 text-primary-700 dark:text-primary-300 border-primary-400/30',
    'PostgreSQL': 'bg-blue-500/20 text-blue-700 dark:text-blue-300 border-blue-400/30',
    'MySQL': 'bg-orange-500/20 text-orange-700 dark:text-orange-300 border-orange-400/30',
    'Redis': 'bg-red-500/20 text-red-700 dark:text-red-300 border-red-400/30',
    'Docker': 'bg-purple-500/20 text-purple-700 dark:text-purple-300 border-purple-400/30',
    'GitLab CI': 'bg-purple-500/20 text-purple-700 dark:text-purple-300 border-purple-400/30',
    'RabbitMQ': 'bg-gray-500/20 text-gray-700 dark:text-gray-300 border-gray-400/30',
    'Flutter': 'bg-cyan-500/20 text-cyan-700 dark:text-cyan-300 border-cyan-400/30',
    'Prometheus': 'bg-purple-500/20 text-purple-700 dark:text-purple-300 border-purple-400/30',
    'Grafana': 'bg-pink-500/20 text-pink-700 dark:text-pink-300 border-pink-400/30'
};

const getTechColor = (tech: string) => {
    return techColorMap[tech as keyof typeof techColorMap] || 'bg-gray-500/20 text-gray-700 dark:text-gray-300 border-gray-400/30';
};

const statusIcon = isCompleted ? 'M5 13l4 4L19 7' : 'M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z';
const statusText = isCompleted ? 'Terminé' : 'En cours';
const statusIconColor = isCompleted ? 'text-primary-600 dark:text-primary-400' : 'text-gray-600 dark:text-gray-400';

// Fix pour les couleurs dynamiques qui ne fonctionnent pas avec Tailwind
const getSuccessMetricClasses = (color: string) => {
    const colors = {
        primary: {
            bg: 'bg-primary-500/10',
            border: 'border-primary-400/20',
            iconText: 'text-primary-600 dark:text-primary-400',
            text: 'text-primary-700 dark:text-primary-300'
        },
        blue: {
            bg: 'bg-blue-500/10',
            border: 'border-blue-400/20',
            iconText: 'text-blue-600 dark:text-blue-400',
            text: 'text-blue-700 dark:text-blue-300'
        },
        green: {
            bg: 'bg-green-500/10',
            border: 'border-green-400/20',
            iconText: 'text-green-600 dark:text-green-400',
            text: 'text-green-700 dark:text-green-300'
        }
    };
    return colors[color as keyof typeof colors] || colors.primary;
};
---

<div class="group relative bg-gradient-to-br from-white/70 to-gray-50/70 dark:from-gray-800/50 dark:to-gray-900/50 backdrop-blur-sm border border-primary-500/20 rounded-3xl p-8 hover:border-primary-500/40 dark:hover:border-primary-400/40 transition-all duration-300 hover:transform hover:scale-[1.02] h-full shadow-sm">
    <div class="absolute inset-0 bg-gradient-to-br from-primary-500/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 rounded-3xl"></div>
    <div class="relative h-full flex flex-col">
        <!-- Project Header -->
        <div class="flex items-center space-x-3 mb-6">
            <!-- Icon -->
            <div class={`w-12 h-12 bg-gradient-to-br ${colorMap[iconColor as keyof typeof colorMap].bg} rounded-2xl flex items-center justify-center ${colorMap[iconColor as keyof typeof colorMap].hoverBg} transition-all duration-300`}>
                <svg class={`w-6 h-6 ${colorMap[iconColor as keyof typeof colorMap].text} transition-colors`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d={iconPath}/>
                </svg>
            </div>
            <h3 class={`text-xl font-bold text-gray-900 dark:text-white ${colorMap[iconColor as keyof typeof colorMap].text} transition-colors`}>
                {title}
            </h3>
        </div>

        <!-- Contenu principal qui prend tout l'espace disponible -->
        <div class="flex-grow">
            <!-- Description -->
            <p class="text-gray-600 dark:text-gray-400 mb-4 leading-relaxed">
                {description}
            </p>

            <!-- Success Metric (optionnel) -->
            {successMetric && (
                <div class={`mb-6 p-4 ${getSuccessMetricClasses(successMetric.color).bg} rounded-2xl border ${getSuccessMetricClasses(successMetric.color).border}`}>
                    <div class="flex items-center space-x-2">
                        <svg class={`w-5 h-5 ${getSuccessMetricClasses(successMetric.color).iconText}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d={successMetric.icon}/>
                        </svg>
                        <p class={`${getSuccessMetricClasses(successMetric.color).text} font-semibold text-sm`}>{successMetric.text}</p>
                    </div>
                </div>
            )}

            <!-- Tech Stack -->
            <div class="mb-6">
                <div class="flex flex-wrap gap-2">
                    {technologies.map(tech => (
                        <span class={`px-3 py-1 ${getTechColor(tech)} text-xs font-medium rounded-full border`}>
                            {tech}
                        </span>
                    ))}
                </div>
            </div>
        </div>

        <!-- Action fixée en bas -->
        <div class="flex items-center justify-between mt-auto pt-4 border-t border-gray-300/30 dark:border-gray-700/30">
            <div class="flex items-center space-x-2 text-gray-600 dark:text-gray-400">
                <svg class={`w-4 h-4 ${statusIconColor}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={statusIcon}/>
                </svg>
                <span class="text-sm">{statusText}</span>
            </div>
            {link ? (
                <a href={link} class="text-primary-600 dark:text-primary-400 hover:text-primary-700 dark:hover:text-primary-300 transition-colors group/btn">
                    <svg class="w-5 h-5 transform group-hover/btn:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"/>
                    </svg>
                </a>
            ) : null}
        </div>
    </div>
</div> 